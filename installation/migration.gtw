~~LANG:EN@enman:installation/migrate~~

Lors d'une migration d'une version Jelix à une autre, il y a toujours au moins
ces étapes à faire :

  * Si vous utilisez Composer, changer la version de Jelix dans le fichier
    composer.json, et lancer Composer.
  * Si vous n'utilisez pas Composer, récupérer les sources de la nouvelle version
    de Jelix et les installer.
  * **supprimer** tous les fichiers dans le répertoire @@F@votre_appli/temp/@@
  * adapter votre code en suivant les instructions indiquées pour chaque
    ancienne version de Jelix. Voir ci-dessous.
  * lancer l'outils de migration qui va faire les reorganisations des sources
    et modifications nécessaires
  * sur chaque instance de l'application, lancer le configurateur et l'installateur
    de Jelix.

===== Mettre à jour depuis Jelix 1.6 et inférieur =====

Suivez les indications de migration de chaque version intermédiaire pour migrer
à la dernière version de Jelix 1.7, avant de mettre à jour pour jelix 1.8.

Voir les instructions de migration des manuels de chacune de ces versions. 

===== Mettre à jour depuis Jelix 1.7.x =====

Voici les instructions à suivre dans l'ordre.

==== Prérequis ====

Jelix 1.8 nécessite PHP 7.4 minimum. Vérifiez que votre serveur a bien cette
version ou une version supérieure. Les versions précédentes n'étant plus maintenu
par PHP à la date d'écriture de ce chapitre.

==== Sauvegarde ====

Tout d'abord, faites une sauvegarde de votre base de données, de vos fichiers de
configuration etc.

==== Répertoires temporaires ====

Comme d'habitude, vous devez vider le contenu de votre répertoire
@@F@temp/votreapp/@@.

==== Installation des sources de Jelix ====

Pour la migration, vous pouvez mettre à jour, soit via Composer, soit
en téléchargeant l'archive comme pour les versions précédentes.

=== Si vous utilisez Composer ===

Dans le répertoire de votre application, modifiez le fichier @@F@composer.json@@
en indiquant la version 1.8 pour le paquet @@jelix/jelix@@ ou @@jelix/jelix-standard@@

Exemple :

<code>
{
    "name": "mycompany/myapp",
    "type": "application",
    "require": {
        "jelix/jelix": "^1.8.0"
    }
}
</code>

Exécutez ensuite en ligne de commande :

<code bash>
composer update
</code>

Sautez l'étape qui suit.

=== Si vous ne voulez pas utiliser Composer ===

Téléchargez le paquet jelix sur le site de téléchargement de jelix.org, comme
vous avez l'habitude de faire.

Remplacez le répertoire @@F@lib/@@ de jelix par celui contenu dans le paquet
jelix, en n'oubliant pas de remettre dans le nouveau répertoire @@F@lib/@@ vos
éventuelles bibliothèques personnelles si vous en aviez mis dans l'ancien.

==== Mise à jour des modules ====  

Mettez à jour les sources des modules tiers que vous avez installés, et qui sont
compatibles avec Jelix 1.8.

Et pour vos propres modules, vous devez adapter le code source en faisant les
modifications suivantes :

  * Dans les fichiers @@F@module.xml@@, indiquez que le module est compatible
    avec Jelix 1.8 (changer l'attribut @@A@maxversion@@). Exemple :

<code xml>
        <jelix minversion="1.6" maxversion="1.8.*"/>
</code>

==== Changements d'API ====

Lisez [[/nouveautes|la liste détaillée des changements]] pour savoir la liste des nouvelles
classes et méthodes que vous pouvez utiliser.

Il y a eu aussi des changements dans certaines API, que vous devriez donc
modifier dans votre code si vous les utilisez :

  * TODO pas de changement pour le moment


Des fonctionnalités, API et modules ont été supprimés. Voir la liste
complète dans [[/nouveautes|les nouveautés]]. Veillez donc à modifier votre
code pour ne plus les utiliser et éventuellement les remplacer par des
alternatives.

==== Lancement de la migration ====

Vous devez maintenant lancer le script de migration de Jelix, qui va faire
beaucoup de changements à votre place.

En particulier :

  * TODO pas de changements pour le moment

Lancez donc maintenant : @@php dev.php jelix:migrate -v@@.

==== Changements dans vos contrôleurs SOAP ====

Il faut remplacer les commentaires de code "@param" par "@externalparam".

Avant :
<code php>
    /**
     * Test with a simple parameter
     * @param string $name
     * @return string
     */
    function hello() {
        $rep = $this->getResponse('soap');
        $rep->data = "Hello ".$this->param('name');
        return $rep;
    }
}
</code>

Après :

<code php>
    /**
     * Test with a simple parameter
     * @externalparam string $name
     * @return string
     */
    function hello() {
        $rep = $this->getResponse('soap');
        $rep->data = "Hello ".$this->param('name');
        return $rep;
    }
}
</code>


==== Mise à jour des instances de l'application ====

Maintenant que les sources de Jelix et de votre application ont été mise à jour,
vous pouvez sauvegarder tout cela dans votre gestionnaire de code source,
et déployer les sources sur vos serveurs de tests (en particulier votre
serveur local si vous en avez un).

Comme à chaque fois que déployez les sources d'une application Jelix sur
un serveur, il faut lancer le configurateur local et l'installateur de Jelix.

Dans le cas présent, le configurateur local terminera le paramétrage et la
migration des informations de configuration spécifiques au contexte du
serveur. Et l'installateur lancera les scripts de mises à jour des données
si il y en a.

Supprimez tout ce qu'il y a dans le répertoire temp/ de votre application,
puis lancez :

<code bash>
php install/configurator.php -v

php install/installer.php -v
</code>


==== Fin ====

Après cela, votre application est de nouveau opérationnelle.




