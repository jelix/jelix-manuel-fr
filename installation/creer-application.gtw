~~LANG:EN@enman:installation/create-application~~

La façon la plus simple de créer une application Jelix, est l'utilisation de la commande
@@bin/create-jelix-app@@. Elle permet de créer un squelette d'application.

Il faut d'abord installer les sources, soit avec Composer, soit à partir
du paquet zip de jelix.org.

==== Installer les sources avec Composer ====

Pour installer Composer, voir le site [[https://getcomposer.org]].

Si vous n'avez pas encore de projet avec un fichier @@F@composer.json@@, créer
un répertoire pour votre projet (prenons myproject comme nom) et y
mettre un fichier @@F@composer.json@@ dont voici un exemple de contenu :

<code json>
{
    "name": "myorganisation/myproject",
    "type": "application",
    "require": {
        "jelix/jelix": "dev-jelix-1.7.x"
    },
    "minimum-stability": "stable"
}
</code>

Vous pouvez aussi créer ce fichier en utilisant la commande @@composer init@@.

Dans ce répertoire, on y exécute Composer pour installer les paquets indiqués
dans le @@F@composer.json@@ :

<code bash>
cd myproject
composer install
</code>

Un répertoire @@F@vendor@@ est alors créé, dans lequel Jelix (et d'autres paquets)
sont installés. Vous trouverez celui de Jelix dans @@F@vendor/jelix/jelix/@@.

Dans la suite du manuel, quand il est signalé le répertoire @@F@lib/@@, il s'agit
de @@F@vendor/jelix/jelix/lib/@@.

La commande @@create-jelix-app@@ se trouve dans @@F@vendor/bin/@@.

==== Installer les sources à partir du site jelix.org ====

Vous pouvez télécharger une archive tar.gz ou zip de Jelix. Cette archive
contient un répertoire @@F@jelix-X.Y.Z/lib/@@ qui comprend tous les fichiers du
framework et les bibliothèques dépendantes.

Décompressez l'archive avec des logiciels comme winzip, unzip ou tar.

<code bash>
  tar xvzf jelix-1.7.2.tar.gz
</code>

Un repertoire @@jelix-1.7.2@@ est créé contenant un répertoire @@lib/@@ et @@bin/@@.
Vous devez mettre ces deux répertoires dans le dossier de votre projet.

La commande create-jelix-app se trouve dans @@F@bin/@@.

==== Lancer create-jelix-app ====

Allez dans le répertoire où est installé la commande create-jelix-app (voir
précédemment), et lancez-la de la manière suivante :

<code bash>
php create-jelix-app /chemin/vers/le/nouveau/répertoire/de/myproject/myapp
</code>

@@myapp@@ est le nom de votre application (que vous pouvez bien sûr choisir
librement).


@@create-jelix-app@@ crée un répertoire @@F@myapp/@@ avec le chemin indiqué. Son
contenu est :

<code>
  myapp/
     app/
        system/    fichiers de configuration système du framework et de l'application
        responses/ classes pour les objets réponses HTML
        themes/    les thèmes disponibles pour votre application
        overloads/ contiendra les différents fichiers qui redéfinissent des
                   fichiers de modules
     install/      scripts et fichiers pour initialiser l'application.
     modules/      modules de l'application
     plugins/      plugins de l'application
     temp/         tous les fichiers temporaires et de cache créés à l'execution de l'application
     var/
        config/    fichiers de configuration spécifiques à l'environnement
        log/       fichiers de log
        themes/    thèmes installés durant la vie de l'application
        overloads/ idem que app/overloads, mais pour les fichiers créés à la volé
                   durant la vie de l'application
     www/          racine du répertoire public de votre application
</code>


===== Premier lancement de votre application =====

Une fois votre application créée, vous pouvez la tester en lançant le serveur web
intégré dans PHP (serveur à n'utiliser qu'en phase de développement, pas en production !).

Tapez donc en ligne de commande :

<code bash>
cd myapp
php -S localhost:8080 -t www 
</code>

Et vous pouvez visiter @@http://localhost:8080@@ avec votre navigateur.

Si vous voulez utiliser un autre serveur web, comme Apache ou Nginx, il vous faudra
faire quelques réglages supplémentaires. Voir le chapitre suivant.
